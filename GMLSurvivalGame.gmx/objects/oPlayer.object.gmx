<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initalize statistics
DEBUG = false;

maximum_health = 100;
current_health = maximum_health;
maximum_stamina = 100;
current_stamina = maximum_stamina;
maximum_saturation = 100;
current_saturation = maximum_saturation;
maximum_hydration = 100;
current_hydration = maximum_hydration;
maximum_velocity = 1.5;




//Initalize Inventory
max_inventory = 8;
selected_slot = 0;
for(var i = 0; i &lt; max_inventory; i++){
    for(var k = 0; k &lt; 2; k++){
        inventory_array[i,0] = -1;
        inventory_array[i,1] = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement
scrControls();
var horizontal_control =  RIGHT - LEFT ;
var vertical_control =  DOWN - UP ;

if(current_stamina &lt; 15){
 SHIFT = 1; // under 15 sat you can only sneak
  // running is imposible
}


if(SHIFT){
maximum_velocity = 0.875  //50% original speed
current_hydration -= 0.001;
} else if(CTRL and current_stamina &gt; 0){
maximum_velocity = 2.625 // 150% original speed
current_stamina -= 0.5;
current_hydration -= 0.005;
}else {
maximum_velocity = 1.5 // original speed
current_hydration -= 0.001;
}
//this code makes it so that whatever direction you go the speed will be constant.
var dir = point_direction(x,y,x+horizontal_control,y+vertical_control);
var hspd = lengthdir_x(abs(horizontal_control) * maximum_velocity,dir);
var vspd = lengthdir_y(abs(vertical_control) * maximum_velocity,dir);

//x += hspd;
//y += vspd;
//survival \/
var max_hydr_stam = current_hydration

if(current_stamina &lt; maximum_stamina){
    if(vertical_control == 0 and horizontal_control == 0){
        current_stamina +=0.25 - ((100 - current_hydration)/500);
    } else {
        if(CTRL){
        current_stamina += 0 - ((100 - current_hydration)/100) ;
        } else if(SHIFT){
        current_stamina += 0.1 - ((100 - current_hydration)/250);
        } else {
        current_stamina += 0.05 - ((100 - current_hydration)/200);
        }
    }
    
}
current_saturation -= 0.001 + (200 - (current_stamina + current_hydration))/8000;
current_health += 0.015 - (0.001 + (100 - current_saturation)/8000) - (0.001 + (100 - current_hydration)/8000);


//clamp the variables
//clamp(current_stamina,0,max_hydr_stam);
if(current_stamina &gt; max_hydr_stam)current_stamina = max_hydr_stam;
if(current_stamina &lt; 0)current_stamina = 0;
//clamp(current_hydration,0,maximum_hydration);
if(current_hydration &gt; maximum_hydration) current_hydration = maximum_hydration;
if(current_hydration &lt; 0)current_hydration = 0;
//clamp(current_health,0,maximum_health);
if(current_health &gt; maximum_health) current_health = maximum_health;
//clamp(current_saturation,0,maximum_saturation);
if(current_saturation &gt; maximum_saturation) current_saturation = maximum_saturation;
if(current_saturation &lt; 0)current_saturation = 0;
//Horizontal Collision
if (place_meeting(x+hspd,y,oWall))
{
    while(!place_meeting(x+sign(hspd),y,oWall))
    {
        x += sign(hspd);
    }
    hspd = 0;
}
x += hspd;


//Horizontal Collision
if (place_meeting(x,y+vspd,oWall))
{
    while(!place_meeting(x,y+sign(vspd),oWall))
    {
        y += sign(vspd);
    }
    vspd = 0;
}
y += vspd;
//setup the camera
view_yview = y - view_hview/2;
view_xview = x - view_wview/2;
//Inventory
itemUnderPlayer = instance_place(x,y,oBaseItem);
if(itemUnderPlayer != noone){
    for(var i = 0; i &lt; max_inventory;i++){
        if(inventory_array[i,0] = itemUnderPlayer.image_index){
            inventory_array[i,1]++
            with(itemUnderPlayer){instance_destroy();
            }
            break;
        }
        if(inventory_array[i,0] = -1){
            inventory_array[i,0] = itemUnderPlayer.image_index;
            inventory_array[i,1]++;
            with(itemUnderPlayer){instance_destroy();
            }
            break;
        }
    }
}
if(MOUSEDOWN){
    if(selected_slot = max_inventory-1){
        selected_slot = 0;
    }else{
        selected_slot++
    }
}
if(MOUSEUP){
    if(selected_slot = 0){
        selected_slot = max_inventory-1;
    }else{
        selected_slot--
    }
}

//DEBUG CODE
//this should be always last

if(DEBUG){
    if(keyboard_check(ord("H")))current_hydration--;
    if(keyboard_check(ord("J")))current_hydration++;
    if(keyboard_check(ord("K")))current_health--;
    if(keyboard_check(ord("L")))current_health++;
    //Spawnas random item
    if(keyboard_check_pressed(ord("M"))){
        rItem = instance_create(mouse_x,mouse_y,oBaseItem);
        rItem.image_index = choose(0,1,2,3);
    }
}

//
//DEBUG CODE

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item use code
//this code will be quite bulky whatever
if(RPMOUSE){
    switch(inventory_array[selected_slot,0]){
        case 0:
        current_hydration += 25;
        inventory_array[selected_slot,1]--;
        if(inventory_array[selected_slot,1] == 0)inventory_array[selected_slot,0] = -1;
        break;
        case 1:
        current_saturation += 25;
        inventory_array[selected_slot,1]--;
        if(inventory_array[selected_slot,1] == 0)inventory_array[selected_slot,0] = -1;
        break;
        default:
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrControls();
var hp = (current_health/maximum_health)*100
draw_healthbar(16,16,32,128,hp,c_black,c_red,c_red,3,false,false)
var st = (current_stamina/maximum_stamina)*100
draw_healthbar(40,16,56,128,st,c_black,c_green,c_green,3,false,false)
var sa = (current_saturation/maximum_saturation)*100
draw_healthbar(64,16,80,128,sa,c_black,c_maroon,c_maroon,3,false,false)
var hy = (current_hydration/maximum_hydration)*100
draw_healthbar(88,16,104,128,hy,c_black,c_blue,c_blue,3,false,false)

for(var i = 0; i &lt; max_inventory;i++){
    draw_set_color(c_dkgray);
    if(selected_slot == i){
    draw_rectangle_color(16,160+(i*32),48,192+(i*32),c_gray,c_gray,c_gray,c_gray,0);
    }else{
    draw_rectangle(16,160+(i*32),48,192+(i*32),0);
    }
    if(inventory_array[i,0] != -1){
        draw_set_color(c_white);
        var xscaling = 32/16;
        var yscaling = 32/16;
        draw_sprite_ext(sItems,inventory_array[i,0],16,160+(i*32),xscaling,yscaling,0,c_white,1);
        draw_text(32,176+(i*32),inventory_array[i,1]);
    }
}
draw_set_color(c_black);





//DEBUG CODE
//
if(DEBUG){
draw_text(view_wport/2,32,"DEBUG MODE ON");
draw_text(view_wport/2,64,current_health);
draw_text(view_wport/2,96,current_stamina);
draw_text(view_wport/2,128,current_saturation);
draw_text(view_wport/2,160,current_hydration);
}
//
//DEBUG CODE


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
